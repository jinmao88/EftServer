// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// DogtagDao is the manager for logic model data accessing and custom defined data operations functions management.
type DogtagDao struct {
	gmvc.M               // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      dogtagColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB        // DB is the raw underlying database management object.
	Table  string        // Table is the underlying table name of the DAO.
}

// DogtagColumns defines and stores column names for table dogtag.
type dogtagColumns struct {
	Id         string //
	PlayerName string //
	KillerName string //
	Map        string //
	Weapon     string //
	Camp       string //
	Level      string //
	KillAt     string //
	CreateAt   string //
	UpdateAt   string //
	DeleteAt   string //
}

// NewDogtagDao creates and returns a new DAO object for table data access.
func NewDogtagDao() *DogtagDao {
	columns := dogtagColumns{
		Id:         "id",
		PlayerName: "player_name",
		KillerName: "killer_name",
		Map:        "map",
		Weapon:     "weapon",
		Camp:       "camp",
		Level:      "level",
		KillAt:     "kill_at",
		CreateAt:   "create_at",
		UpdateAt:   "update_at",
		DeleteAt:   "delete_at",
	}
	return &DogtagDao{
		C:     columns,
		M:     g.DB("default").Model("dogtag").Safe(),
		DB:    g.DB("default"),
		Table: "dogtag",
	}
}
